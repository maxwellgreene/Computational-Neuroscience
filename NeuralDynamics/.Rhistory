geom_line(lwd=2)+
#Add labels
xlab("Time")+ylab("Number") +
facet_grid(vars(variable),scales='free')
## Stimulus
I <- c(2, 5, 5.97, 5.975, 6.2, 6.5)
sims <- do.call("rbind",
lapply(I, function(i){
parms(HH)["I"] <- i
HH <- sim(HH)
cbind(I=paste("", i), out(HH))
}))
sims1<-gather(sims,"variable","value", 3:6)
#sims1$I <-as.numeric(sims1$I)
ggplot(sims1,aes(x=time,y=value,colour=variable,group=variable))+
# Add line
geom_line(lwd=2)+
#Add labels
xlab("Time")+ylab("Number") +
facet_grid(variable ~ I, scales='free')
HH1 <- odeModel(
main = function(time, init, parms) {
with(as.list(c(init, parms)),{
voltage <- k*t/z*e * log(co/ci)
return(list(c(voltage)))
})
},
## Set parameters
parms = c(k=1.381*10^-23,t=27,z=-1,e=1.602*10^-19),
## Set integrations times
times = c(from=0, to=40, by = 0.25),
## Set initial state
init = c(co=0.56,ci=0.04),
solver = "lsoda"
)
HH12 <- sim(HH1)
source('~/GitHub/Computational-Neuroscience/NeuralDynamics/NeuralDynamics/numericalHH.R')
source('~/GitHub/Computational-Neuroscience/NeuralDynamics/NeuralDynamics/gatingVariables.R')
source('~/GitHub/Computational-Neuroscience/NeuralDynamics/NeuralDynamics/numericalHH.R')
setwd("~/GitHub/Computational-Neuroscience/NeuralDynamics/NeuralDynamics")
source('~/GitHub/Computational-Neuroscience/NeuralDynamics/NeuralDynamics/numericalHH.R')
source('~/GitHub/Computational-Neuroscience/NeuralDynamics/NeuralDynamics/numericalHHplots.R')
source("numericalHHsimplified.R")
source('~/GitHub/Computational-Neuroscience/NeuralDynamics/NeuralDynamics/plotGatings.R')
numericalHH
numericalHH()
source('~/GitHub/Computational-Neuroscience/NeuralDynamics/NeuralDynamics/numericalHH.R')
numericalHH()
numericalHH
HHsol <- data.frame(t=out[,"time"],v=out[,"v"],h=out[,"h"],m=out[,"m"],n=out[,"n"])
p1 <- HHsol %>%
ggplot(aes(x = t, y = v)) +
geom_line(aes(x = t, y = v),lwd=2) +
labs(x="time [ms]",y = "v [mV]") +
theme_bw()
p1
p3
ah <- alpha_h(v)
p2
library(ggplot2)
ps2
grid.arrange(ps1, ps2, nrow = 2)
}
alpha_n <- function(v){
alpha_n<-0.01*(-60.0-v)/(exp((-60-v)/10)-1)
}
am <- alpha_m(v)
p2
library(tidyverse)
library(simecol)
library(reshape2)
library(tidyr)
## Hodkin-Huxley model
HH <- odeModel(
main = function(time, init, parms) {
with(as.list(c(init, parms)),{
am <- function(v) 0.1*(v+40)/(1-exp(-(v+40)/10))
bm <- function(v) 4*exp(-(v+65)/18)
ah <- function(v) 0.07*exp(-(v+65)/20)
bh <- function(v) 1/(1+exp(-(v+35)/10))
an <- function(v) 0.01*(v+55)/(1-exp(-(v+55)/10))
bn <- function(v) 0.125*exp(-(v+65)/80)
dv <- (I - gna*h*(v-Ena)*m^3-gk*(v-Ek)*n^4-gl*(v-El))/C
dm <- am(v)*(1-m)-bm(v)*m
dh <- ah(v)*(1-h)-bh(v)*h
dn <- an(v)*(1-n)-bn(v)*n
return(list(c(dv, dm, dh, dn)))
})
},
## Set parameters
parms = c(Ena=50, Ek=-77, El=-54.4, gna=120, gk=36, gl=0.3, C=1, I=0),
## Set integrations times
times = c(from=0, to=40, by = 0.25),
## Set initial state
init = c(v=-65, m=0.052, h=0.596, n=0.317),
solver = "lsoda"
)
HH <- sim(HH)
HH.out<-out(HH)
HH.out.long<-melt(as.data.frame(HH.out),"time")
ggplot(HH.out.long,aes(x=time,y=value,colour=variable,group=variable))+
# Add line
geom_line(lwd=2)+
#Add labels
xlab("Time")+ylab("Number") +
facet_grid(vars(variable),scales='free')
## Stimulus
I <- c(2, 5, 5.97, 5.975, 6.2, 6.5)
sims <- do.call("rbind",
lapply(I, function(i){
parms(HH)["I"] <- i
HH <- sim(HH)
cbind(I=paste("", i), out(HH))
}))
sims1<-gather(sims,"variable","value", 3:6)
#sims1$I <-as.numeric(sims1$I)
ggplot(sims1,aes(x=time,y=value,colour=variable,group=variable))+
# Add line
geom_line(lwd=2)+
#Add labels
xlab("Time")+ylab("Number") +
facet_grid(variable ~ I, scales='free')
HH1 <- odeModel(
main = function(time, init, parms) {
with(as.list(c(init, parms)),{
voltage <- k*t/z*e * log(co/ci)
return(list(c(voltage)))
})
},
## Set parameters
parms = c(k=1.381*10^-23,t=27,z=-1,e=1.602*10^-19),
## Set integrations times
times = c(from=0, to=40, by = 0.25),
## Set initial state
init = c(co=0.56,ci=0.04),
solver = "lsoda"
)
HH12 <- sim(HH1)
library(tidyverse)
library(simecol)
library(reshape2)
library(tidyr)
## Hodkin-Huxley model
HH <- odeModel(
main = function(time, init, parms) {
with(as.list(c(init, parms)),{
am <- function(v) 0.1*(v+40)/(1-exp(-(v+40)/10))
bm <- function(v) 4*exp(-(v+65)/18)
ah <- function(v) 0.07*exp(-(v+65)/20)
bh <- function(v) 1/(1+exp(-(v+35)/10))
an <- function(v) 0.01*(v+55)/(1-exp(-(v+55)/10))
bn <- function(v) 0.125*exp(-(v+65)/80)
dv <- (I - gna*h*(v-Ena)*m^3-gk*(v-Ek)*n^4-gl*(v-El))/C
dm <- am(v)*(1-m)-bm(v)*m
dh <- ah(v)*(1-h)-bh(v)*h
dn <- an(v)*(1-n)-bn(v)*n
return(list(c(dv, dm, dh, dn)))
})
},
## Set parameters
parms = c(Ena=50, Ek=-77, El=-54.4, gna=120, gk=36, gl=0.3, C=1, I=0),
## Set integrations times
times = c(from=0, to=40, by = 0.25),
## Set initial state
init = c(v=-65, m=0.052, h=0.596, n=0.317),
solver = "lsoda"
)
HH <- sim(HH)
HH.out<-out(HH)
HH.out.long<-melt(as.data.frame(HH.out),"time")
ggplot(HH.out.long,aes(x=time,y=value,colour=variable,group=variable))+
# Add line
geom_line(lwd=2)+
#Add labels
xlab("Time")+ylab("Number") +
facet_grid(vars(variable),scales='free')
## Stimulus
I <- c(2, 5, 5.97, 5.975, 6.2, 6.5)
sims <- do.call("rbind",
lapply(I, function(i){
parms(HH)["I"] <- i
HH <- sim(HH)
cbind(I=paste("", i), out(HH))
}))
sims1<-gather(sims,"variable","value", 3:6)
#sims1$I <-as.numeric(sims1$I)
ggplot(sims1,aes(x=time,y=value,colour=variable,group=variable))+
# Add line
geom_line(lwd=2)+
#Add labels
xlab("Time")+ylab("Number") +
facet_grid(variable ~ I, scales='free')
HH1 <- odeModel(
main = function(time, init, parms) {
with(as.list(c(init, parms)),{
voltage <- k*t/z*e * log(co/ci)
return(list(c(voltage)))
})
},
## Set parameters
parms = c(k=1.381*10^-23,t=27,z=-1,e=1.602*10^-19),
## Set integrations times
times = c(from=0, to=40, by = 0.25),
## Set initial state
init = c(co=0.56,ci=0.04),
solver = "lsoda"
)
HH12 <- sim(HH1)
library(tidyverse)
library(simecol)
library(reshape2)
library(tidyr)
## Hodkin-Huxley model
HH <- odeModel(
main = function(time, init, parms) {
with(as.list(c(init, parms)),{
am <- function(v) 0.1*(v+40)/(1-exp(-(v+40)/10))
bm <- function(v) 4*exp(-(v+65)/18)
ah <- function(v) 0.07*exp(-(v+65)/20)
bh <- function(v) 1/(1+exp(-(v+35)/10))
an <- function(v) 0.01*(v+55)/(1-exp(-(v+55)/10))
bn <- function(v) 0.125*exp(-(v+65)/80)
dv <- (I - gna*h*(v-Ena)*m^3-gk*(v-Ek)*n^4-gl*(v-El))/C
dm <- am(v)*(1-m)-bm(v)*m
dh <- ah(v)*(1-h)-bh(v)*h
dn <- an(v)*(1-n)-bn(v)*n
return(list(c(dv, dm, dh, dn)))
})
},
## Set parameters
parms = c(Ena=50, Ek=-77, El=-54.4, gna=120, gk=36, gl=0.3, C=1, I=0),
## Set integrations times
times = c(from=0, to=40, by = 0.25),
## Set initial state
init = c(v=-65, m=0.052, h=0.596, n=0.317),
solver = "lsoda"
)
HH <- sim(HH)
HH.out<-out(HH)
HH.out.long<-melt(as.data.frame(HH.out),"time")
ggplot(HH.out.long,aes(x=time,y=value,colour=variable,group=variable))+
# Add line
geom_line(lwd=2)+
#Add labels
xlab("Time")+ylab("Number") +
facet_grid(vars(variable),scales='free')
## Stimulus
I <- c(2, 5, 5.97, 5.975, 6.2, 6.5)
sims <- do.call("rbind",
lapply(I, function(i){
parms(HH)["I"] <- i
HH <- sim(HH)
cbind(I=paste("", i), out(HH))
}))
sims1<-gather(sims,"variable","value", 3:6)
#sims1$I <-as.numeric(sims1$I)
ggplot(sims1,aes(x=time,y=value,colour=variable,group=variable))+
# Add line
geom_line(lwd=2)+
#Add labels
xlab("Time")+ylab("Number") +
facet_grid(variable ~ I, scales='free')
HH1 <- odeModel(
main = function(time, init, parms) {
with(as.list(c(init, parms)),{
voltage <- k*t/z*e * log(co/ci)
return(list(c(voltage)))
})
},
## Set parameters
parms = c(k=1.381*10^-23,t=27,z=-1,e=1.602*10^-19),
## Set integrations times
times = c(from=0, to=40, by = 0.25),
## Set initial state
init = c(co=0.56,ci=0.04),
solver = "lsoda"
)
HH12 <- sim(HH1)
plot(cars)
library(tidyverse)
library(simecol)
library(reshape2)
library(tidyr)
## Hodkin-Huxley model
HH <- odeModel(
main = function(time, init, parms) {
with(as.list(c(init, parms)),{
am <- function(v) 0.1*(v+40)/(1-exp(-(v+40)/10))
bm <- function(v) 4*exp(-(v+65)/18)
ah <- function(v) 0.07*exp(-(v+65)/20)
bh <- function(v) 1/(1+exp(-(v+35)/10))
an <- function(v) 0.01*(v+55)/(1-exp(-(v+55)/10))
bn <- function(v) 0.125*exp(-(v+65)/80)
dv <- (I - gna*h*(v-Ena)*m^3-gk*(v-Ek)*n^4-gl*(v-El))/C
dm <- am(v)*(1-m)-bm(v)*m
dh <- ah(v)*(1-h)-bh(v)*h
dn <- an(v)*(1-n)-bn(v)*n
return(list(c(dv, dm, dh, dn)))
})
},
## Set parameters
parms = c(Ena=50, Ek=-77, El=-54.4, gna=120, gk=36, gl=0.3, C=1, I=0),
## Set integrations times
times = c(from=0, to=40, by = 0.25),
## Set initial state
init = c(v=-65, m=0.052, h=0.596, n=0.317),
solver = "lsoda"
)
HH <- sim(HH)
HH.out<-out(HH)
HH.out.long<-melt(as.data.frame(HH.out),"time")
ggplot(HH.out.long,aes(x=time,y=value,colour=variable,group=variable))+
# Add line
geom_line(lwd=2)+
#Add labels
xlab("Time")+ylab("Number") +
facet_grid(vars(variable),scales='free')
## Stimulus
I <- c(2, 5, 5.97, 5.975, 6.2, 6.5)
sims <- do.call("rbind",
lapply(I, function(i){
parms(HH)["I"] <- i
HH <- sim(HH)
cbind(I=paste("", i), out(HH))
}))
sims1<-gather(sims,"variable","value", 3:6)
#sims1$I <-as.numeric(sims1$I)
ggplot(sims1,aes(x=time,y=value,colour=variable,group=variable))+
# Add line
geom_line(lwd=2)+
#Add labels
xlab("Time")+ylab("Number") +
facet_grid(variable ~ I, scales='free')
HH1 <- odeModel(
main = function(time, init, parms) {
with(as.list(c(init, parms)),{
voltage <- k*t/z*e * log(co/ci)
return(list(c(voltage)))
})
},
## Set parameters
parms = c(k=1.381*10^-23,t=27,z=-1,e=1.602*10^-19),
## Set integrations times
times = c(from=0, to=40, by = 0.25),
## Set initial state
init = c(co=0.56,ci=0.04),
solver = "lsoda"
)
HH12 <- sim(HH1)
factorial(10)
choose(10,4)
factorial(10)
choose(10,4)
?rbinom
rbinom(5,1,1)
rbinom(5,2,1)
rbinom(5,2,.5)
rbinom(5,.5,.5)
rbinom(5,5,.5)
rbinom(5,5,.5)
rbinom(5,5,.5)
rbinom(5,5,.5)
rbinom(n=5,size=5,prob=.5)
rbinom(2,5,.5)
rbinom(1,5,.5)
rbinom(1,100,.5)
rbinom(5,10,.5)
install.packages("fastR2")
install.packages("fastR2")
install.packages("fastR2")
install.packages("fastR2")
library(fastR2)
rbinom(5,10,.25)
rbinom(100,1,.5)
rbinom(100,1,.5)
rbinom(25,1,.5)
rep(1,5)
library(tidyverse)
library(dplyr)
library(GeneticAlgorithms)
phenotype <- rnorm(1,0,1)
phenotype
individual <- data.frame(var1=rnorm(1,0,1),
var2=rnorm(1,0,1))
individual
numIndivs <- 2
makespecies <- function(numIndivs)
{
species <- data.frame(var1=rnorm(numIndivs,0,1),
var2=rnorm(numIndivs,0,1))
return(species)
}
makespecies(numIndivs)
numSpecies <- 2
population <- data.frame(speciesNum=0,var1=0,var2=0)
for(i in 1:numSpecies)
{
population <- rbind(population,
mutate(speciesNum = rep(i,numIndivs),
makespecies(numIndivs)))
}
population[-1,]
fitnessFunction <- function(x,y)
{  return(x+y)  }
fitnessFunction(1,2)
parent <- data.frame(var1=rnorm(1,0,.5),
var2=rnorm(1,0,.5))
child <- data.frame(var1=rnorm(1,0,.5),
var2=rnorm(1,0,.5))
parent <- data.frame(var1=rnorm(1,0,.5),
var2=rnorm(1,0,.5))
offspring <- data.frame(var1=parent$var1*rnorm(1,1,.1),
var2=parent$var2*rnorm(1,1,.1))
fitfunc <- function(x,y)
{return((y*sin(x)+x*cos(y)))}
geneticPopulation(fitfunc,species=10,indivs=10,gens=100,creation="new",plot="time")
temp <- c(1,2,3,4,5)
temp*temp
temp.*temp
combn(temp)
combn(temp,temp)
combn(temp,)
1
combn(temp,1)
combn(temp,5)
combn(temp,2)
u
u[0] <- 10
u[1] <- 10
u<-10
u[1] <- 10
u
u[1] <- 11
u
u<-10
u[1] <- 11
u
u[2] <- 11
u<-10
u[2] <- 11
u
u[1]<-10
u[2] <- 11
u
rbinom(100,10,1)
rbinom(100,10,.1)
rbinom(10,100,.1)
rbinom(10,100,.01)
rbinom(10,100,.1)
runif(10,1,5)
runif(10,1,1)
runif(10,1,2)
rm(list=ls())
x <- seq(-100,100,1001)
head(x)
x <- seq(-100,100,by=1001)
x
?seq
x <- seq(-100,100,.1)
y <- dbinom(x,size=250,prob=.1)
y <- dbinom(x,size=250,prob=.4)
y <- dbinom(x,size=25,prob=.4)
?dbinom
y <- dbinom(x,size=25,prob=0.1)
y <- dbinom(x,size=2,prob=0.1)
y <- dbinom(x,size=25,prob=0.1)
ggplot(data=NULL) + geom_point(mapping=aes(x=x,y=y))
x <- seq(-100,100,1)
y <- dbinom(x,size=25,prob=0.1)
ggplot(data=NULL) + geom_point(mapping=aes(x=x,y=y))
x <- seq(0,10,1)
x <- seq(0,10,.1)
y <- dbinom(x,size=25,prob=0.1)
y <- dbinom(x,size=100,prob=0.1)
ggplot(data=NULL) + geom_point(mapping=aes(x=x,y=y))
y <- dbinom(x,size=10,prob=0.1)
ggplot(data=NULL) + geom_point(mapping=aes(x=x,y=y))
ggplot(data=NULL) + geom_point(mapping=aes(x=x,y=y))
y <- dbinom(x,size=100,prob=0.1)
ggplot(data=NULL) + geom_point(mapping=aes(x=x,y=y))
?rbinom
y
y <- dbinom(x,size=1,prob=0.1)
y <- dbinom(x,size=1,prob=0.5)
y <- dbinom(x,size=10,prob=0.5)
warnings()
x <- seq(0,10,by=1)
y <- dbinom(x,size=10,prob=0.5)
ggplot(data=NULL) + geom_point(mapping=aes(x=x,y=y))
x <- seq(-10,10,by=1)
y <- dbinom(x,size=10,prob=0.5)
ggplot(data=NULL) + geom_point(mapping=aes(x=x,y=y))
y <- dbinom(x,size=100,prob=0.5)
ggplot(data=NULL) + geom_point(mapping=aes(x=x,y=y))
y <- dbinom(x,size=0,prob=0.5)
ggplot(data=NULL) + geom_point(mapping=aes(x=x,y=y))
y <- dbinom(x,size=0,prob=0.8)
ggplot(data=NULL) + geom_point(mapping=aes(x=x,y=y))
y <- dbinom(x,size=1,prob=0.8)
ggplot(data=NULL) + geom_point(mapping=aes(x=x,y=y))
x <- seq(-10,10,by=.1)
y <- dbinom(x,size=1,prob=0.8)
x <- seq(-10,10,by=.1)
ggplot(data=NULL) + geom_point(mapping=aes(x=x,y=y))
library(tidyverse)
library(dplyr)
source("gatingVariables.R")
source("plotGatings.R")
p1
p2
library(tidyverse)
library(dplyr)
