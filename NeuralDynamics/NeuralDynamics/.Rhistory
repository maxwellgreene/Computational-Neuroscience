ns <- floor(0.75*nl)
ss <- sample(seq(1,nl),ns,replace = FALSE)
ss <- sort(ss)
train_set <- maxmindf[ss, ]
test_set <- maxmindf[-ss, ]
#Create test/train labels
trn <- rep("train",length(train_set[ ,1]))
tst <- rep("test",length(test_set[ ,1]))
trnPtst <- c(trn,tst)
my_data <- rbind(train_set,test_set)
my_data <- my_data %>% mutate(trainTest = trnPtst)
#Plot data separated into training/test
my_data %>% ggplot(mapping = aes(x=x,y=y,color=trainTest)) + geom_point() + ggtitle("Function Data")
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
x <- seq(-15,15,0.1)
y <- 3*sin(pi*x^2)*sqrt(cos(pi*x)^2) #x^3 - 3*x^2 + 6*x - 9
fnc <- data.frame(x=x,y=y)
#Scaled Normalization
scaleddata<-scale(fnc)
#Max-Min Normalization
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(fnc, normalize))
nl <- nrow(maxmindf)
ns <- floor(0.75*nl)
ss <- sample(seq(1,nl),ns,replace = FALSE)
ss <- sort(ss)
train_set <- maxmindf[ss, ]
test_set <- maxmindf[-ss, ]
#Create test/train labels
trn <- rep("train",length(train_set[ ,1]))
tst <- rep("test",length(test_set[ ,1]))
trnPtst <- c(trn,tst)
my_data <- rbind(train_set,test_set)
my_data <- my_data %>% mutate(trainTest = trnPtst)
#Plot data separated into training/test
my_data %>% ggplot(mapping = aes(x=x,y=y,color=trainTest)) + geom_point() + ggtitle("Function Data")
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
x <- seq(-1,1,0.01)
y <- 3*sin(pi*x^2)*sqrt(cos(pi*x)^2) #x^3 - 3*x^2 + 6*x - 9
fnc <- data.frame(x=x,y=y)
#Scaled Normalization
scaleddata<-scale(fnc)
#Max-Min Normalization
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(fnc, normalize))
nl <- nrow(maxmindf)
ns <- floor(0.75*nl)
ss <- sample(seq(1,nl),ns,replace = FALSE)
ss <- sort(ss)
train_set <- maxmindf[ss, ]
test_set <- maxmindf[-ss, ]
#Create test/train labels
trn <- rep("train",length(train_set[ ,1]))
tst <- rep("test",length(test_set[ ,1]))
trnPtst <- c(trn,tst)
my_data <- rbind(train_set,test_set)
my_data <- my_data %>% mutate(trainTest = trnPtst)
#Plot data separated into training/test
my_data %>% ggplot(mapping = aes(x=x,y=y,color=trainTest)) + geom_point() + ggtitle("Function Data")
#Neural Network
library(neuralnet)
nn <- neuralnet(y ~ x, data=train_set, hidden=c(2,1))
nn$result.matrix
#plot(nn)
#Test the resulting output
temp_test <- subset(test_set, select = c("x"))
head(temp_test)
nn.results <- neuralnet::compute(nn, temp_test)
#Accuracy
results <- data.frame(actual = test_set$y, prediction = nn.results$net.result)
results
roundedresults<-sapply(results,round,digits=0)
roundedresultsdf=data.frame(roundedresults)
attach(roundedresultsdf)
table(actual,prediction)
test_predict <- data.frame(x=test_set$x,yt=test_set$y,yp=nn.results$net.result)
#Plot prediction and test together
test_predict %>%
gather(Column, Value, -x) %>%
ggplot(aes(x = x, y = Value, color = Column)) +
geom_point(aes(x = x, y = Value))
nl <- nrow(maxmindf)
ns <- floor(0.80*nl)
ss <- sample(seq(1,nl),ns,replace = FALSE)
ss <- sort(ss)
train_set <- maxmindf[ss, ]
test_set <- maxmindf[-ss, ]
#Create test/train labels
trn <- rep("train",length(train_set[ ,1]))
tst <- rep("test",length(test_set[ ,1]))
trnPtst <- c(trn,tst)
my_data <- rbind(train_set,test_set)
my_data <- my_data %>% mutate(trainTest = trnPtst)
#Plot data separated into training/test
my_data %>% ggplot(mapping = aes(x=x,y=y,color=trainTest)) + geom_point() + ggtitle("Function Data")
#Neural Network
library(neuralnet)
nn <- neuralnet(y ~ x, data=train_set, hidden=c(2,1))
nn$result.matrix
#plot(nn)
#Neural Network
library(neuralnet)
nn <- neuralnet(y ~ x, data=train_set, hidden=c(8,4,4,2))
nn$result.matrix
#plot(nn)
#Test the resulting output
temp_test <- subset(test_set, select = c("x"))
head(temp_test)
nn.results <- neuralnet::compute(nn, temp_test)
#Accuracy
results <- data.frame(actual = test_set$y, prediction = nn.results$net.result)
results
roundedresults<-sapply(results,round,digits=0)
roundedresultsdf=data.frame(roundedresults)
attach(roundedresultsdf)
table(actual,prediction)
test_predict <- data.frame(x=test_set$x,yt=test_set$y,yp=nn.results$net.result)
#Plot prediction and test together
test_predict %>%
gather(Column, Value, -x) %>%
ggplot(aes(x = x, y = Value, color = Column)) +
geom_point(aes(x = x, y = Value))
#Neural Network
library(neuralnet)
nn <- neuralnet(y ~ x, data=train_set, hidden=c(20,10,10,5,2,1))
nn$result.matrix
#plot(nn)
#Test the resulting output
temp_test <- subset(test_set, select = c("x"))
head(temp_test)
nn.results <- neuralnet::compute(nn, temp_test)
#Accuracy
results <- data.frame(actual = test_set$y, prediction = nn.results$net.result)
results
roundedresults<-sapply(results,round,digits=0)
roundedresultsdf=data.frame(roundedresults)
attach(roundedresultsdf)
table(actual,prediction)
test_predict <- data.frame(x=test_set$x,yt=test_set$y,yp=nn.results$net.result)
#Plot prediction and test together
test_predict %>%
gather(Column, Value, -x) %>%
ggplot(aes(x = x, y = Value, color = Column)) +
geom_point(aes(x = x, y = Value))
x <- seq(-2,2,0.01)
y <- 3*sin(pi*x^2)*sqrt(cos(pi*x)^2) #x^3 - 3*x^2 + 6*x - 9
fnc <- data.frame(x=x,y=y)
#Scaled Normalization
scaleddata<-scale(fnc)
#Max-Min Normalization
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(fnc, normalize))
nl <- nrow(maxmindf)
ns <- floor(0.80*nl)
ss <- sample(seq(1,nl),ns,replace = FALSE)
ss <- sort(ss)
train_set <- maxmindf[ss, ]
test_set <- maxmindf[-ss, ]
#Create test/train labels
trn <- rep("train",length(train_set[ ,1]))
tst <- rep("test",length(test_set[ ,1]))
trnPtst <- c(trn,tst)
my_data <- rbind(train_set,test_set)
my_data <- my_data %>% mutate(trainTest = trnPtst)
#Plot data separated into training/test
my_data %>% ggplot(mapping = aes(x=x,y=y,color=trainTest)) + geom_point() + ggtitle("Function Data")
#Neural Network
library(neuralnet)
nn <- neuralnet(y ~ x, data=train_set, hidden=c(20,10,10,5,2,1))
nn$result.matrix
#plot(nn)
#Test the resulting output
temp_test <- subset(test_set, select = c("x"))
head(temp_test)
nn.results <- neuralnet::compute(nn, temp_test)
#Accuracy
results <- data.frame(actual = test_set$y, prediction = nn.results$net.result)
results
roundedresults<-sapply(results,round,digits=0)
roundedresultsdf=data.frame(roundedresults)
attach(roundedresultsdf)
table(actual,prediction)
test_predict <- data.frame(x=test_set$x,yt=test_set$y,yp=nn.results$net.result)
#Plot prediction and test together
test_predict %>%
gather(Column, Value, -x) %>%
ggplot(aes(x = x, y = Value, color = Column)) +
geom_point(aes(x = x, y = Value))
#Neural Network
library(neuralnet)
nn <- neuralnet(y ~ x, data=train_set, hidden=c(50,20,20,15,10,10))
nn$result.matrix
#plot(nn)
#Test the resulting output
temp_test <- subset(test_set, select = c("x"))
head(temp_test)
nn.results <- neuralnet::compute(nn, temp_test)
#Accuracy
results <- data.frame(actual = test_set$y, prediction = nn.results$net.result)
results
roundedresults<-sapply(results,round,digits=0)
roundedresultsdf=data.frame(roundedresults)
attach(roundedresultsdf)
table(actual,prediction)
test_predict <- data.frame(x=test_set$x,yt=test_set$y,yp=nn.results$net.result)
#Plot prediction and test together
test_predict %>%
gather(Column, Value, -x) %>%
ggplot(aes(x = x, y = Value, color = Column)) +
geom_point(aes(x = x, y = Value))
plot(nn)
x <- seq(-3,3,0.01)
y <- 3*sin(pi*x^2)*sqrt(cos(pi*x)^2) #x^3 - 3*x^2 + 6*x - 9
fnc <- data.frame(x=x,y=y)
#Scaled Normalization
scaleddata<-scale(fnc)
#Max-Min Normalization
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(fnc, normalize))
nl <- nrow(maxmindf)
ns <- floor(0.75*nl)
ss <- sample(seq(1,nl),ns,replace = FALSE)
ss <- sort(ss)
train_set <- maxmindf[ss, ]
test_set <- maxmindf[-ss, ]
#Create test/train labels
trn <- rep("train",length(train_set[ ,1]))
tst <- rep("test",length(test_set[ ,1]))
trnPtst <- c(trn,tst)
my_data <- rbind(train_set,test_set)
my_data <- my_data %>% mutate(trainTest = trnPtst)
#Plot data separated into training/test
my_data %>% ggplot(mapping = aes(x=x,y=y,color=trainTest)) + geom_point() + ggtitle("Function Data")
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
x <- seq(-3,3,0.01)
y <- 3*sin(pi*x^2)*sqrt(cos(pi*x)^2) #x^3 - 3*x^2 + 6*x - 9
fnc <- data.frame(x=x,y=y)
#Scaled Normalization
scaleddata<-scale(fnc)
#Max-Min Normalization
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(fnc, normalize))
nl <- nrow(maxmindf)
ns <- floor(0.75*nl)
ss <- sample(seq(1,nl),ns,replace = FALSE)
ss <- sort(ss)
train_set <- maxmindf[ss, ]
test_set <- maxmindf[-ss, ]
#Create test/train labels
trn <- rep("train",length(train_set[ ,1]))
tst <- rep("test",length(test_set[ ,1]))
trnPtst <- c(trn,tst)
my_data <- rbind(train_set,test_set)
my_data <- my_data %>% mutate(trainTest = trnPtst)
#Plot data separated into training/test
my_data %>% ggplot(mapping = aes(x=x,y=y,color=trainTest)) + geom_point() + ggtitle("Function Data")
#Plot data separated into training/test
my_data %>% ggplot(mapping = aes(x=x,y=y,color=trainTest)) + geom_point() + geom_line(aes(x=x,y=y)) + ggtitle("Function Data")
xf <- seq(-3,3,0.01)
yf <- 3*sin(pi*x^2)*sqrt(cos(pi*x)^2) #x^3 - 3*x^2 + 6*x - 9
fnc <- data.frame(x=xf,y=yf)
#Scaled Normalization
scaleddata<-scale(fnc)
#Max-Min Normalization
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(fnc, normalize))
nl <- nrow(maxmindf)
ns <- floor(0.75*nl)
ss <- sample(seq(1,nl),ns,replace = FALSE)
ss <- sort(ss)
train_set <- maxmindf[ss, ]
test_set <- maxmindf[-ss, ]
#Create test/train labels
trn <- rep("train",length(train_set[ ,1]))
tst <- rep("test",length(test_set[ ,1]))
trnPtst <- c(trn,tst)
my_data <- rbind(train_set,test_set)
my_data <- my_data %>% mutate(trainTest = trnPtst)
#Plot data separated into training/test
my_data %>% ggplot(mapping = aes(x=x,y=y,color=trainTest)) + geom_point() + geom_line(aes(x=xf,y=yf)) + ggtitle("Function Data")
xf <- seq(-3,3,0.01)
yf <- 3*sin(pi*x^2)*sqrt(cos(pi*x)^2) #x^3 - 3*x^2 + 6*x - 9
fnc <- data.frame(x=xf,y=yf)
#Scaled Normalization
scaleddata<-scale(fnc)
#Max-Min Normalization
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(fnc, normalize))
nl <- nrow(maxmindf)
ns <- floor(0.75*nl)
ss <- sample(seq(1,nl),ns,replace = FALSE)
ss <- sort(ss)
train_set <- maxmindf[ss, ]
test_set <- maxmindf[-ss, ]
#Create test/train labels
trn <- rep("train",length(train_set[ ,1]))
tst <- rep("test",length(test_set[ ,1]))
trnPtst <- c(trn,tst)
my_data <- rbind(train_set,test_set)
my_data <- my_data %>% mutate(trainTest = trnPtst)
#Plot data separated into training/test
my_data %>% ggplot(mapping = aes(x=x,y=y,color=trainTest)) + geom_point() + geom_line(aes(x=maxmindf$x,y=maxmindf$y)) + ggtitle("Function Data")
#Plot data separated into training/test
my_data %>% ggplot(mapping = aes(x=x,y=y,color=trainTest)) + geom_point() + geom_line(aes(x=maxmindf$x,y=maxmindf$y),color="blue") + ggtitle("Function Data")
#Plot data separated into training/test
my_data %>% ggplot(mapping = aes(x=x,y=y,color=trainTest)) + geom_point() + geom_line(aes(x=maxmindf$x,y=maxmindf$y),color="black") + ggtitle("Function Data")
#Plot data separated into training/test
my_data %>% ggplot(mapping = aes(x=x,y=y,color=trainTest),size=3) + geom_point() + geom_line(aes(x=maxmindf$x,y=maxmindf$y),color="black") + ggtitle("Function Data")
#Plot data separated into training/test
my_data %>% ggplot(mapping = aes(x=x,y=y,color=trainTest),size=5) + geom_point() + geom_line(aes(x=maxmindf$x,y=maxmindf$y),color="black") + ggtitle("Function Data")
#Plot data separated into training/test
my_data %>% ggplot(mapping = aes(x=x,y=y,color=trainTest)) + geom_point(size=3) + geom_line(aes(x=maxmindf$x,y=maxmindf$y),color="black") + ggtitle("Function Data")
#Neural Network
library(neuralnet)
nn <- neuralnet(y ~ x, data=train_set, hidden=c(50,20,10))
nn$result.matrix
#plot(nn)
#Test the resulting output
temp_test <- subset(test_set, select = c("x"))
head(temp_test)
nn.results <- neuralnet::compute(nn, temp_test)
#Accuracy
results <- data.frame(actual = test_set$y, prediction = nn.results$net.result)
results
roundedresults<-sapply(results,round,digits=0)
roundedresultsdf=data.frame(roundedresults)
attach(roundedresultsdf)
table(actual,prediction)
test_predict <- data.frame(x=test_set$x,yt=test_set$y,yp=nn.results$net.result)
#Plot prediction and test together
test_predict %>%
gather(Column, Value, -x) %>%
ggplot(aes(x = x, y = Value, color = Column)) +
geom_point(aes(x = x, y = Value)) + geom_line(aes(x=maxmindf$x,y=maxmindf$y),color="black")
test_predict <- data.frame(x=test_set$x,yt=test_set$y,yp=nn.results$net.result)
#Plot prediction and test together
test_predict %>%
gather(Column, Value, -x) %>%
ggplot(aes(x = x, y = Value, color = Column)) +
geom_point(aes(x = x, y = Value))
#+ geom_line(aes(x=maxmindf$x,y=maxmindf$y),color="black")
#Plot data separated into training/test
my_data %>% ggplot(mapping = aes(x=x,y=y,color=trainTest)) + geom_point(size=3) + geom_line(aes(x=maxmindf$x,y=maxmindf$y),color="black") + ggtitle("Function Data")
test_predict <- data.frame(x=test_set$x,yt=test_set$y,yp=nn.results$net.result)
#Plot prediction and test together
test_predict %>%
gather(Column, Value, -x) %>%
ggplot(aes(x = x, y = Value, color = Column)) +
geom_point(aes(x = x, y = Value),size=3)
#+ geom_line(aes(x=maxmindf$x,y=maxmindf$y),color="black")
test_predict %>%
gather(Column, Value, -x) %>%
ggplot(aes(x = x, y = Value, color = Column)) +
geom_point(aes(x = x, y = Value),size=3) + geom_line(x=maxmindf$x,y=maxmindf$y,color="black")
test_predict <- data.frame(x=test_set$x,yt=test_set$y,yp=nn.results$net.result)
#Plot prediction and test together
test_predict %>%
gather(Column, Value, -x) %>%
ggplot(aes(x = x, y = Value, color = Column)) +
geom_point(aes(x = x, y = Value),size=3) + geom_line(aes(x=maxmindf$x,y=maxmindf$y),color="black")
test_predict %>%
gather(Column, Value, -x) %>%
ggplot(aes(x = x, y = Value, color = Column)) +
geom_point(aes(x = x, y = Value),size=3) +
geom_line(x=maxmindf$x,y=maxmindf$y)
test_predict <- data.frame(x=test_set$x,yt=test_set$y,yp=nn.results$net.result)
#Plot prediction and test together
test_predict %>%
gather(Column, Value, -x) %>%
ggplot(aes(x = x, y = Value, color = Column)) +
geom_point(aes(x = x, y = Value),size=3)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
xf <- seq(-3,3,0.01)
yf <- 3*sin(pi*x^2)*sqrt(cos(pi*x)^2) #x^3 - 3*x^2 + 6*x - 9
fnc <- data.frame(x=xf,y=yf)
#Scaled Normalization
scaleddata<-scale(fnc)
#Max-Min Normalization
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(fnc, normalize))
nl <- nrow(maxmindf)
ns <- floor(0.75*nl)
ss <- sample(seq(1,nl),ns,replace = FALSE)
ss <- sort(ss)
train_set <- maxmindf[ss, ]
test_set <- maxmindf[-ss, ]
#Create test/train labels
trn <- rep("train",length(train_set[ ,1]))
tst <- rep("test",length(test_set[ ,1]))
trnPtst <- c(trn,tst)
my_data <- rbind(train_set,test_set)
my_data <- my_data %>% mutate(trainTest = trnPtst)
#Plot data separated into training/test
my_data %>% ggplot(mapping = aes(x=x,y=y,color=trainTest)) + geom_point(size=3) + geom_line(aes(x=maxmindf$x,y=maxmindf$y),color="black") + ggtitle("Function Data")
#Neural Network
library(neuralnet)
nn <- neuralnet(y ~ x, data=train_set, hidden=c(50,20,10))
nn$result.matrix
#plot(nn)
#Test the resulting output
temp_test <- subset(test_set, select = c("x"))
head(temp_test)
nn.results <- neuralnet::compute(nn, temp_test)
#Accuracy
results <- data.frame(actual = test_set$y, prediction = nn.results$net.result)
results
roundedresults<-sapply(results,round,digits=0)
roundedresultsdf=data.frame(roundedresults)
attach(roundedresultsdf)
table(actual,prediction)
test_predict <- data.frame(x=test_set$x,yt=test_set$y,yp=nn.results$net.result)
#Plot prediction and test together
test_predict %>%
gather(Column, Value, -x) %>%
ggplot(aes(x = x, y = Value, color = Column)) +
geom_point(aes(x = x, y = Value),size=3) + geom_line(data=NULL,aes(x=maxmindf$x,y=maxmindf$y),color="black")
test_predict %>%
gather(Column, Value, -x) %>%
ggplot(aes(x = x, y = Value, color = Column)) +
geom_point(aes(x = x, y = Value),size=3) + geom_line(data=maxmindf,mapping=aes(x=x,y=y),color="black")
setwd("~/Documents/R/TopicsR/Math463Sp18/NeuralDynamics")
library(ggplot2)
library(tidyverse)
library(dplyr)
library(gridExtra)
source("twoDhhHopf.R")
# vary I from about 5 (crit = 5.2) through 7.5 (crit = 7.2)
Ival <- 5.0
out1 <- twoDhhBif(I=Ival)
lcData1 <- data.frame(t=out1[,"time"],v=out1[,"v"],n=out1[,"n"])
out2 <- twoDhhBif(I=Ival,v0=-65,n0=0.36)
lcData2 <- data.frame(t=out2[,"time"],v=out2[,"v"],n=out2[,"n"])
out3 <- twoDhhBif(I=Ival,v0=-65,n0=0.4)
lcData3 <- data.frame(t=out3[,"time"],v=out3[,"v"],n=out3[,"n"])
out4 <- twoDhhBif(I=Ival,v0=-25,n0=0.5)
lcData4 <- data.frame(t=out4[,"time"],v=out4[,"v"],n=out4[,"n"])
ggplot( ) + geom_path(data=lcData1,aes(x = v, y = n, color = t),lwd=1) +
geom_path(data=lcData2,aes(x = v, y = n, color = t),lwd=1) +
geom_path(data=lcData3,aes(x = v, y = n, color = t),lwd=1) +
geom_path(data=lcData4,aes(x = v, y = n, color = t),lwd=1) +
xlim(c(-100,50)) + ylim(c(0,1)) + xlab("Potential v [mV]") + ylab("K Gate Variable n") +
theme_bw()
ggplot( ) + #geom_path(data=lcData1,aes(x = v, y = n, color = t),lwd=1) +
#geom_path(data=lcData2,aes(x = v, y = n, color = t),lwd=1) +
# geom_path(data=lcData3,aes(x = v, y = n, color = t),lwd=1) +
geom_path(data=lcData4,aes(x = v, y = n, color = t),lwd=1) +
xlim(c(-100,50)) + ylim(c(0,1)) + xlab("Potential v [mV]") + ylab("K Gate Variable n") +
theme_bw()
Ival <- 5.8
out1 <- twoDhhBif(I=Ival)
lcData1 <- data.frame(t=out1[,"time"],v=out1[,"v"],n=out1[,"n"])
out2 <- twoDhhBif(I=Ival,v0=-65,n0=0.36)
lcData2 <- data.frame(t=out2[,"time"],v=out2[,"v"],n=out2[,"n"])
out3 <- twoDhhBif(I=Ival,v0=-65,n0=0.4)
lcData3 <- data.frame(t=out3[,"time"],v=out3[,"v"],n=out3[,"n"])
out4 <- twoDhhBif(I=Ival,v0=-25,n0=0.5)
lcData4 <- data.frame(t=out4[,"time"],v=out4[,"v"],n=out4[,"n"])
ggplot( ) + geom_path(data=lcData1,aes(x = v, y = n, color = t),lwd=1) +
geom_path(data=lcData2,aes(x = v, y = n, color = t),lwd=1) +
geom_path(data=lcData3,aes(x = v, y = n, color = t),lwd=1) +
geom_path(data=lcData4,aes(x = v, y = n, color = t),lwd=1) +
xlim(c(-100,50)) + ylim(c(0,1)) + xlab("Potential v [mV]") + ylab("K Gate Variable n") +
theme_bw()
Ival <- 7.5
out1 <- twoDhhBif(I=Ival)
lcData1 <- data.frame(t=out1[,"time"],v=out1[,"v"],n=out1[,"n"])
out2 <- twoDhhBif(I=Ival,v0=-65,n0=0.36)
lcData2 <- data.frame(t=out2[,"time"],v=out2[,"v"],n=out2[,"n"])
out3 <- twoDhhBif(I=Ival,v0=-65,n0=0.4)
lcData3 <- data.frame(t=out3[,"time"],v=out3[,"v"],n=out3[,"n"])
out4 <- twoDhhBif(I=Ival,v0=-25,n0=0.5)
lcData4 <- data.frame(t=out4[,"time"],v=out4[,"v"],n=out4[,"n"])
ggplot( ) + geom_path(data=lcData1,aes(x = v, y = n, color = t),lwd=1) +
geom_path(data=lcData2,aes(x = v, y = n, color = t),lwd=1) +
geom_path(data=lcData3,aes(x = v, y = n, color = t),lwd=1) +
geom_path(data=lcData4,aes(x = v, y = n, color = t),lwd=1) +
xlim(c(-100,50)) + ylim(c(0,1)) + xlab("Potential v [mV]") + ylab("K Gate Variable n") +
theme_bw()
ggplot( ) + #geom_path(data=lcData1,aes(x = v, y = n, color = t),lwd=1) +
#geom_path(data=lcData2,aes(x = v, y = n, color = t),lwd=1) +
#geom_path(data=lcData3,aes(x = v, y = n, color = t),lwd=1) +
geom_path(data=lcData4,aes(x = v, y = n, color = t),lwd=1) +
xlim(c(-100,50)) + ylim(c(0,1)) + xlab("Potential v [mV]") + ylab("K Gate Variable n") +
theme_bw()
